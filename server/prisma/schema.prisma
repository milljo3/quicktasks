// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String      @id @default(cuid())
  email        String      @unique
  password     String
  boards       Board[]     @relation("BoardOwner")
  sharedBoards BoardUser[]
}

model Board {
  id      String      @id @default(cuid())
  title   String
  ownerId String
  owner   User        @relation("BoardOwner", fields: [ownerId], references: [id])
  lists   List[]
  users   BoardUser[]
}

model BoardUser {
  id      String  @id @default(cuid())
  userId  String
  boardId String
  canEdit Boolean @default(false)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  board   Board   @relation(fields: [boardId], references: [id], onDelete: Cascade)

  @@unique([userId, boardId])
}

model List {
  id       String @id @default(cuid())
  title    String
  position Int
  boardId  String
  board    Board  @relation(fields: [boardId], references: [id])
  tasks    Task[]
}

// Can add an association between a task and a user EX: Assign task A to user B
// Can add tags - similar to trello
// Can add a card modal - similar to trello - which means more columns/tables like comments, description, title, etc. 
model Task {
  id          String @id @default(cuid())
  description String
  position    Float
  listId      String
  list        List   @relation(fields: [listId], references: [id])
}
